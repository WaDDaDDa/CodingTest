//문제 설명
//길이가 같은 배열 A, B 두개가 있습니다.각 배열은 자연수로 이루어져 있습니다.
//배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다.이러한 과정을 배열의 길이만큼 반복하며,
//  두 수를 곱한 값을 누적하여 더합니다.이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.
//  (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)
//
//예를 들어 A = [1, 4, 2], B = [5, 4, 4] 라면
//
//A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)
//A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)
//A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)
//즉, 이 경우가 최소가 되므로 29를 return 합니다.
//
//배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.
//
//제한사항
//배열 A, B의 크기 : 1, 000 이하의 자연수
//배열 A, B의 원소의 크기 : 1, 000 이하의 자연수

#include <iostream>
#include <vector>
#include <algorithm>



int solution(std::vector<int> _Min, std::vector<int> _Max)
{
    int answer = 0;

    std::sort(_Min.begin(), _Min.end());
    std::sort(_Max.begin(), _Max.end());

    size_t Size = _Min.size() - 1;

    for (size_t i = 0; i < _Min.size(); i++)
    {
        answer += _Min[i] * _Max[Size - i];
    }

    return answer;
}

// 다른 해답
//int solution(vector<int> A, vector<int> B) 
//{
//    sort(A.begin(), A.end());  sort(B.rbegin(), B.rend());
//    return inner_product(A.begin(), A.end(), B.begin(), 0);
//}


void main()
{
    int a = solution({ 1, 4, 2 }, { 5, 4, 4 });

    int z = 0;
}

// 알게된것
// 1. 리버스 반복자. rbegin, rend 에대해 알게됨. 역방향으로 반복할수 있음.
// 내가 한것처럼 Size를 구하는 짓을 안하고 sort할 수 있다.
// 2. inner_product
// inner_product(A.begin(), A.end(), B.begin(), 0); 와같이 마지막 인자는 초기값이라고 생각하면 됨.
// a의 크기만큼 a 와 b 를 서로 곱하고 더하는 내적.b가 a의 크기보다 작으면 안된다. 